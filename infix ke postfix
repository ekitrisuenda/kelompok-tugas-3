#include<iostream>
#include<stack>
#include<string>

using namespace std;

string infix_ke_postfix(string ekspresi);

int tingkat_operator(char operator1, char operator2);
bool Operator(char C);
bool Operand(char C);

int main() 
{
	string ekspresi;
	
	ekspresi="5+(4*3)+4-8";
	cout<<"expresi = "<<ekspresi<<endl<<endl;
	
	string postfix = infix_ke_postfix(ekspresi);
	cout<<"menjadi posfix = "<<postfix<<endl;
}


string infix_ke_postfix(string ekspresi)
{ 
	stack<char> S;
	string postfix = ""; 
	for(int i = 0;i< ekspresi.length();i++) {

		if(ekspresi[i] == ' ' || ekspresi[i] == ',') continue; 

		else if(Operator(ekspresi[i])) 
		{
			while(!S.empty() && S.top() != '(' && tingkat_operator(S.top(),ekspresi[i]))
			{
				postfix+= S.top();
				S.pop();
			}
			S.push(ekspresi[i]);
		}
		else if(Operand(ekspresi[i]))
		{
			postfix +=ekspresi[i];
		}

		else if (ekspresi[i] == '(') 
		{
			S.push(ekspresi[i]);
		}

		else if(ekspresi[i] == ')') 
		{
			while(!S.empty() && S.top() !=  '(') {
				postfix += S.top();
				S.pop();
			}
			S.pop();
		}
	}

	while(!S.empty()) {
		postfix += S.top();
		S.pop();
	}

	return postfix;
}

bool Operand(char C) 
{
	if(C >= '0' && C <= '9') return true;
	if(C >= 'a' && C <= 'z') return true;
	if(C >= 'A' && C <= 'Z') return true;
	return false;
}

bool Operator(char C)
{
	if(C == '+' || C == '-' || C == '*' || C == '/' || C== '$')
		return true;

	return false;
}

int Associative(char op)
{
	if(op == '$') return true;
	return false;
}
 
int carioperator(char op)
{
	int weight = -1; 
	switch(op)
	{
	case '+':
		
	case '-':
		weight = 1;
		break;
	case '*':
	case '/':
		weight = 2;
		break;
	case '$':
		weight = 3;
	}
	return weight;
}

int tingkat_operator(char op1, char op2)
{
	int op1Weight = carioperator(op1);
	int op2Weight = carioperator(op2);
 
	if(op1Weight == op2Weight)
	{
		if(Associative(op1)) return false;
		else return true;
	}
	return op1Weight > op2Weight ?  true: false;
}

